/*思想和先序遍历差不多，很轻易就做出来了，但是可能算法优化还有的问题，想把pos和max一起找了， 
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
       if(nums.empty())
         return NULL;
       int max=0;
       int pos=0;  
       for(int i=0;i<nums.size();i++)
       {  
         if(nums[i]>max)
         {
           max=nums[i];
         }
       } 
      for(int i=0;i<nums.size();i++)
      {
          if(nums[i]==max)
          {
              pos=i;
              break;
          }
      } 
       TreeNode*root=new TreeNode(max);
       vector<int>left(nums.begin(),nums.begin()+pos);
       vector<int>right(nums.begin()+pos+1,nums.end());
       root->left=constructMaximumBinaryTree(left);
       root->right=constructMaximumBinaryTree(right);
       return root;

    }
};
