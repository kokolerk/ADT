//friends circle
连通分量就是遍历次数
熟练掌握DFS代码，思想，以及每运行一步出来什么结果
class Solution {
public:
    vector<bool>visited; 
    int findCircleNum(vector<vector<int>>& M) {
     int count=0;
     int N=M.size();
     for(int i=0;i<N;i++)
     visited.push_back(false);
     for(int i=0;i<N;i++)
     {
         if(!visited[i])
         {DFS(i,M);
         count++;  }
     }
     return count;
    }
    void DFS(int i,vector<vector<int>>& M)
    {   int N=M.size();
        visited[i]=true;
        for(int j=0;j<N;j++)
        {
            if(M[i][j]==1&&!visited[j])
            DFS(j,M);
        }
    }
};
//key and rooms
class Solution {
public:
    vector<bool>visited;
    bool result;
    
    int travel(vector<vector<int>>& rooms)
    { 
        int len=rooms.size();
        int num=0;
        for(int i=0;i<len;i++)
        {
            visited.push_back(false);
        }
        for(int i=0;i<len;i++)
        {
            if(visited[i]==false)
            {
                DFS(i,rooms);
                num++;
            }
        }
        return num;
    }
    void DFS(int i,vector<vector<int>>& rooms)
    {
        visited[i]=true;
        int l=rooms[i].size();
        for(int j=0;j<l;j++)
        {
            if(visited[rooms[i][j]]==false)
              DFS(rooms[i][j],rooms);
        }
           
    }
    
    bool canVisitAllRooms(vector<vector<int>>& rooms) {
    int a=travel(rooms);
    if(a==1)
    return true;
    else
    return false;

    }
};
