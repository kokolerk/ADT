#include <iostream>
#include <vector>
#include <stack>
using namespace std;

class MyQueue {
public:
     stack<int>pushed;
     stack<int>poped;
    /** Initialize your data structure here. */
    MyQueue() {

    }

    /** Push element x to the back of queue. */
    void push(int x) {
    pushed.push(x);
    }

    /** Removes the element from in front of queue and returns that element. */
    int pop()
    {
        int temp;
        if(poped.empty())
        {
            for(int i=0; i<pushed.size(); i++)
            {
                poped.push(pushed.top());
                pushed.pop();
            }
            temp=poped.top();
            poped.pop();
            return temp;
        }
        else
        {
            temp=poped.top();
            poped.pop();
            return temp;

        }

        }

    /** Get the front element. */
    int peek() {
      if(!poped.empty())
        return poped.top();
      else
      {
           for(int i=0; i<pushed.size(); i++)
            {
                poped.push(pushed.top());
                pushed.pop();
            }
            return poped.top();
      }


    }

    /** Returns whether the queue is empty. */
    bool empty() {
     if(pushed.empty()&&poped.empty())
        return true;
     else
        return false;
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
