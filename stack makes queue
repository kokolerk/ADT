#include <iostream>
#include <vector>
#include <stack>
using namespace std;
/*用两个栈来实现队列的push，pop，peek（top），empty操作*/
class MyQueue {
public:
     stack<int>pushed;
     stack<int>poped;
    /** Initialize your data structure here. */
    MyQueue() {

    }

    /** Push element x to the back of queue. */
    void push(int x) {
    pushed.push(x);
    }

    /** Removes the element from in front of queue and returns that element. */
    int pop()
    {
        int temp;
        if(poped.empty())
        {
            while(!pushed.empty())
            {
                poped.push(pushed.top());
                pushed.pop();
            }
        }
            temp=poped.top();
            poped.pop();
            return temp;
        }

    /** Get the front element. */
    int peek() {
      if(!poped.empty())
        return poped.top();
      else
      {
           while(!pushed.empty())
            {
                poped.push(pushed.top());
                pushed.pop();
            }
            return poped.top();
      }


    }

    /** Returns whether the queue is empty. */
    bool empty() {
     return pushed.empty()&&poped.empty();
    }

};


/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
/*第一次编程出现失误，可能是笔者对stack的判断用了for循环，for（int i=0;i<a.size(),i++）来实现，而不是while（！a.empty()）。
然而实际上，笔者做了一个小程序进行试验，发现一个非常奇怪的问题，就是top上面还有一个空的元素，一开始是没有任何效果的，
也就是说，你必须把i的上限变成a.size()+1，这样才可以把所有的栈内元素进行操作。具体原理笔者还不知道，欢迎大佬来解惑。*/
